@model PaginatedList<MiningOps.Entity.InventoryItem>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Inventory Management";
    var searchString = Context.Request.Query["searchString"].ToString();
    var warehouseFilter = Context.Request.Query["warehouseFilter"].ToString();
    var categoryFilter = Context.Request.Query["categoryFilter"].ToString();
    var stockStatusFilter = Context.Request.Query["stockStatusFilter"].ToString();
}

<div class="site1">
    <div class="page-header">
        <h1><i class="fas fa-boxes"></i> Inventory Management</h1>
        <p class="lead">Manage and track all inventory items across warehouses</p>
    </div>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <a asp-controller="Warehouses" asp-action="Index" class="btn btn-info me-2">
        <i class="fas fa-warehouse"></i> Manage Warehouses
    </a>
    <!-- Filters Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0"><i class="fas fa-filter"></i> Filters & Search</h5>
        </div>
        <div class="card-body">
            <form method="get" asp-action="Index" class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label class="form-label">Search Items</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" name="searchString" value="@searchString"
                               class="form-control" placeholder="Search item name or description..." />
                    </div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Warehouse</label>
                    <select name="warehouseFilter" class="form-select">
                        <option value="">All Warehouses</option>
                        @foreach (var w in (SelectList)ViewBag.Warehouses)
                        {
                            <option value="@w.Value" selected="@(warehouseFilter == w.Value)">
                                @w.Text
                            </option>
                        }
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Category</label>
                    <select name="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var c in (List<string>)ViewBag.Categories)
                        {
                            <option value="@c" selected="@(categoryFilter == c)">
                                @c
                            </option>
                        }
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Stock Status</label>
                    <select name="stockStatusFilter" class="form-select">
                        <option value="">All Status</option>
                        <option value="instock" selected="@(stockStatusFilter == "instock")">In Stock</option>
                        <option value="lowstock" selected="@(stockStatusFilter == "lowstock")">Low Stock</option>
                        <option value="outofstock" selected="@(stockStatusFilter == "outofstock")">Out of Stock</option>
                    </select>
                </div>

                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary w-100 mb-2">
                        <i class="fas fa-filter"></i> Apply Filters
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-times"></i> Clear Filters
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Summary Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card stat-card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@ViewBag.TotalItems</h4>
                            <p class="mb-0">Total Items</p>
                        </div>
                        <div class="stat-icon">
                            <i class="fas fa-box fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stat-card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>R@(ViewBag.TotalValue?.ToString("N2") ?? "0.00")</h4>
                            <p class="mb-0">Total Value</p>
                        </div>
                        <div class="stat-icon">
                            <i class="fas fa-dollar-sign fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stat-card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@ViewBag.LowStockCount</h4>
                            <p class="mb-0">Low Stock</p>
                        </div>
                        <div class="stat-icon">
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stat-card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@ViewBag.OutOfStockCount</h4>
                            <p class="mb-0">Out of Stock</p>
                        </div>
                        <div class="stat-icon">
                            <i class="fas fa-times-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Filter Buttons -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex flex-wrap gap-2">
                <a href="@Url.Action("Index", new { searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = "" })" 
                   class="btn @(string.IsNullOrEmpty(stockStatusFilter) ? "btn-primary" : "btn-outline-primary") btn-sm">
                    All Items (@ViewBag.TotalItems)
                </a>
                <a href="@Url.Action("Index", new { searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = "instock" })" 
                   class="btn @(stockStatusFilter == "instock" ? "btn-success" : "btn-outline-success") btn-sm">
                    In Stock (@(ViewBag.TotalItems - ViewBag.LowStockCount - ViewBag.OutOfStockCount))
                </a>
                <a href="@Url.Action("Index", new { searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = "lowstock" })" 
                   class="btn @(stockStatusFilter == "lowstock" ? "btn-warning" : "btn-outline-warning") btn-sm">
                    Low Stock (@ViewBag.LowStockCount)
                </a>
                <a href="@Url.Action("Index", new { searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = "outofstock" })" 
                   class="btn @(stockStatusFilter == "outofstock" ? "btn-danger" : "btn-outline-danger") btn-sm">
                    Out of Stock (@ViewBag.OutOfStockCount)
                </a>
            </div>
        </div>
    </div>

    <!-- Inventory Table -->
    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-list"></i> Inventory Items
                @if (!string.IsNullOrEmpty(searchString) || !string.IsNullOrEmpty(warehouseFilter) || !string.IsNullOrEmpty(categoryFilter) || !string.IsNullOrEmpty(stockStatusFilter))
                {
                    <small class="text-muted ms-2">(Filtered Results)</small>
                }
            </h5>
            <div>
                <span class="text-muted me-3">Showing @Model.Count of @Model.TotalCount items</span>
                @if (User.IsInRole("Admin") || User.IsInRole("Supervisor"))
                {
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Add New Item
                    </a>
                }
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th>
                                <a href="@Url.Action("Index", new { sortOrder = ViewData["NameSortParm"], searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter })" class="sortable-header">
                                    <i class="fas fa-tag"></i> Item Name
                                    @if (ViewData["CurrentSort"]?.ToString() == "name_desc")
                                    {
                                        <i class="fas fa-sort-down"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-sort-up"></i>
                                    }
                                </a>
                            </th>
                            <th><i class="fas fa-align-left"></i> Description</th>
                            <th>
                                <a href="@Url.Action("Index", new { sortOrder = ViewData["QuantitySortParm"], searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter })" class="sortable-header">
                                    <i class="fas fa-hashtag"></i> Quantity
                                    @if (ViewData["CurrentSort"]?.ToString() == "quantity_desc")
                                    {
                                        <i class="fas fa-sort-down"></i>
                                    }
                                    else if (ViewData["CurrentSort"]?.ToString() == "quantity")
                                    {
                                        <i class="fas fa-sort-up"></i>
                                    }
                                </a>
                            </th>
                            <th>
                                <a href="@Url.Action("Index", new { sortOrder = ViewData["CostSortParm"], searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter })" class="sortable-header">
                                    <i class="fas fa-money-bill-wave"></i> Unit Cost
                                </a>
                            </th>
                            <th>
                                <a href="@Url.Action("Index", new { sortOrder = ViewData["WarehouseSortParm"], searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter })" class="sortable-header">
                                    <i class="fas fa-warehouse"></i> Warehouse
                                </a>
                            </th>
                            <th>
                                <a href="@Url.Action("Index", new { sortOrder = ViewData["DateSortParm"], searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter })" class="sortable-header">
                                    <i class="fas fa-calendar-alt"></i> Last Updated
                                </a>
                            </th>
                            <th><i class="fas fa-cogs"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center py-5">
                                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                                    <h5>No Inventory Items Found</h5>
                                    <p class="text-muted">
                                        @if (!string.IsNullOrEmpty(searchString) || !string.IsNullOrEmpty(warehouseFilter) || !string.IsNullOrEmpty(categoryFilter) || !string.IsNullOrEmpty(stockStatusFilter))
                                        {
                                            <text>Try adjusting your search criteria or filters</text>
                                        }
                                        else
                                        {
                                            <text>Get started by adding your first inventory item</text>
                                        }
                                    </p>
                                    @if (User.IsInRole("Admin") || User.IsInRole("Supervisor"))
                                    {
                                        <a asp-action="Create" class="btn btn-primary">
                                            <i class="fas fa-plus-circle"></i> Add First Item
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var item in Model)
                            {
                                var totalValue = item.Quantity * item.UnitCost;
                                var stockStatus = item.Quantity <= 0 ? "Out of Stock" : 
                                                item.Quantity <= item.ReorderLevel ? "Low Stock" : "In Stock";
                                var statusColor = item.Quantity <= 0 ? "danger" : 
                                                item.Quantity <= item.ReorderLevel ? "warning" : "success";
                                
                                <tr class="inventory-row">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="item-avatar bg-primary text-white me-3">
                                                <i class="fas fa-box"></i>
                                            </div>
                                            <div>
                                                <strong>@item.ItemName</strong>
                                                @if (!string.IsNullOrEmpty(item.ItemName))
                                                {
                                                    <br>
                                                    <span class="badge bg-info">@item.ItemName</span>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="description-preview">
                                            @if (!string.IsNullOrEmpty(item.Description))
                                            {
                                                @(item.Description.Length > 50 ? item.Description.Substring(0, 50) + "..." : item.Description)
                                            }
                                            else
                                            {
                                                <span class="text-muted">No description</span>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <div class="quantity-info">
                                            <strong>@item.Quantity</strong>
                                            <span class="badge bg-@statusColor ms-1">@stockStatus</span>
                                            @if (!string.IsNullOrEmpty(item.Unit))
                                            {
                                                <small class="text-muted d-block">@item.Unit</small>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <div class="cost-info">
                                            <strong>R@(item.UnitCost.ToString("N2"))</strong>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="warehouse-info">
                                            <i class="fas fa-warehouse text-muted me-1"></i>
                                            @item.Warehouse?.Name
                                        </div>
                                    </td>
                                    <td>
                                        <small class="text-muted">@item.LastUpdated.ToString("MMM dd, yyyy HH:mm")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a asp-action="Details" asp-route-id="@item.InventoryId" class="btn btn-outline-info" title="Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            @if (User.IsInRole("Admin") || User.IsInRole("Supervisor"))
                                            {
                                                <a asp-action="Edit" asp-route-id="@item.InventoryId" class="btn btn-outline-primary" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                            }
                                            @if (User.IsInRole("Admin"))
                                            {
                                                <a asp-action="Delete" asp-route-id="@item.InventoryId" class="btn btn-outline-danger" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="card-footer">
                <nav aria-label="Inventory pagination">
                    <ul class="pagination justify-content-center mb-0">
                        @{
                            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                        }
                        
                        <li class="page-item @prevDisabled">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { pageNumber = 1, searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter, sortOrder = ViewData["CurrentSort"] })">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                        </li>
                        
                        <li class="page-item @prevDisabled">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { pageNumber = Model.PageIndex - 1, searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter, sortOrder = ViewData["CurrentSort"] })">
                                <i class="fas fa-angle-left"></i>
                            </a>
                        </li>

                        @for (int i = Math.Max(1, Model.PageIndex - 2); i <= Math.Min(Model.TotalPages, Model.PageIndex + 2); i++)
                        {
                            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                <a class="page-link" 
                                   href="@Url.Action("Index", new { pageNumber = i, searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter, sortOrder = ViewData["CurrentSort"] })">
                                    @i
                                </a>
                            </li>
                        }

                        <li class="page-item @nextDisabled">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { pageNumber = Model.PageIndex + 1, searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter, sortOrder = ViewData["CurrentSort"] })">
                                <i class="fas fa-angle-right"></i>
                            </a>
                        </li>
                        
                        <li class="page-item @nextDisabled">
                            <a class="page-link" 
                               href="@Url.Action("Index", new { pageNumber = Model.TotalPages, searchString = searchString, warehouseFilter = warehouseFilter, categoryFilter = categoryFilter, stockStatusFilter = stockStatusFilter, sortOrder = ViewData["CurrentSort"] })">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        </li>
                    </ul>
                    <div class="text-center text-muted mt-2">
                        Page @Model.PageIndex of @Model.TotalPages - Showing @Model.Count items out of @Model.TotalCount
                    </div>
                </nav>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-submit form when filter selects change
            const filterSelects = document.querySelectorAll('select[name="warehouseFilter"], select[name="categoryFilter"], select[name="stockStatusFilter"]');
            filterSelects.forEach(select => {
                select.addEventListener('change', function() {
                    this.form.submit();
                });
            });

            // Row hover effects
            const inventoryRows = document.querySelectorAll('.inventory-row');
            inventoryRows.forEach(row => {
                row.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
                });
                
                row.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = 'none';
                });
            });
        });
    </script>
}

<style>
    .site1 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f7f9;
        min-height: 100vh;
        padding: 20px;
    }

    /* Page Header */
    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }

        .page-header h1 {
            margin: 0;
            font-weight: 300;
        }

        .page-header .lead {
            opacity: 0.9;
            margin: 0.5rem 0 0 0;
        }

    /* Alert Styles */
    .alert {
        border-radius: 10px;
        border: none;
    }

    /* Stat Cards */
    .stat-card {
        border: none;
        border-radius: 10px;
        transition: transform 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

    .stat-icon {
        opacity: 0.8;
    }

    /* Card Styles */
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 2px solid #dee2e6;
        padding: 1.5rem;
        border-radius: 15px 15px 0 0 !important;
    }

        .card-header h5 {
            color: #495057;
            font-weight: 600;
        }

    .card-body {
        padding: 2rem;
    }

    .card-footer {
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
        padding: 1.5rem;
        border-radius: 0 0 15px 15px !important;
    }

    /* Table Styles */
    .table {
        margin-bottom: 0;
    }

        .table th {
            border: none;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
            padding: 1rem;
        }

        .table td {
            border: none;
            padding: 1rem;
            vertical-align: middle;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
        transition: all 0.3s ease;
    }

    /* Item Avatar */
    .item-avatar {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    /* Sortable Headers */
    .sortable-header {
        color: white;
        text-decoration: none;
        transition: color 0.3s ease;
    }

        .sortable-header:hover {
            color: #f8f9fa;
        }

    /* Description Preview */
    .description-preview {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Quantity Info */
    .quantity-info, .cost-info {
        font-weight: 600;
    }

    /* Warehouse Info */
    .warehouse-info {
        display: flex;
        align-items: center;
    }

    /* Action Buttons */
    .btn-group .btn {
        border-radius: 6px;
        margin: 0 2px;
        transition: all 0.3s ease;
    }

        .btn-group .btn:hover {
            transform: translateY(-1px);
        }

    /* Main Create Button */
    .btn-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        }

    /* Pagination */
    .pagination .page-item .page-link {
        border-radius: 8px;
        margin: 0 2px;
        border: none;
    }

    .page-item.active .page-link {
        background: #007bff;
    }

    /* Badge Styles */
    .badge {
        font-size: 0.75rem;
        padding: 0.4em 0.8em;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .site1 {
            padding: 10px;
        }

        .card-body {
            padding: 1rem;
        }

        .stat-card .card-body {
            padding: 1rem;
        }

        .table-responsive {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
        }

        .btn-group {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

            .btn-group .btn {
                margin: 0;
                text-align: center;
            }

        .item-avatar {
            width: 35px;
            height: 35px;
            font-size: 0.9rem;
        }

        .page-header {
            padding: 1.5rem;
        }
    }

    /* Animation for rows */
    .inventory-row {
        transition: all 0.3s ease;
    }
</style>

<!-- Font Awesome Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">