@model IEnumerable<MiningOps.Entity.SupplierContract>

@{
    ViewData["Title"] = "Supplier Contracts";
}

<div class="page-header mb-4">
    <div class="row align-items-center">
        <div class="col">
            <h1><i class="fas fa-file-contract"></i> Supplier Contracts</h1>
            <p class="lead text-muted">Manage all supplier contracts and agreements</p>
        </div>
        <div class="col-auto">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create New Contract
            </a>
        </div>
    </div>
</div>

<!-- Summary Cards -->
<div class="row mb-4">
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-primary text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Count()</div>
                <small>Total Contracts</small>
            </div>
        </div>
    </div>
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-success text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value >= DateTime.Now)</div>
                <small>Active</small>
            </div>
        </div>
    </div>
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-warning text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value < DateTime.Now.AddDays(30) && c.EndDate.Value >= DateTime.Now)</div>
                <small>Expiring Soon</small>
            </div>
        </div>
    </div>
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-danger text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value < DateTime.Now)</div>
                <small>Expired</small>
            </div>
        </div>
    </div>
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-info text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Count(c => !c.EndDate.HasValue)</div>
                <small>Ongoing</small>
            </div>
        </div>
    </div>
    <div class="col-xl-2 col-md-4 col-6">
        <div class="card bg-secondary text-white mb-3">
            <div class="card-body text-center p-3">
                <div class="h4 mb-0">@Model.Sum(c => c.ContractValue ?? 0).ToString("C")</div>
                <small>Total Value</small>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0"><i class="fas fa-clipboard-list"></i> Contract Overview</h5>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-secondary" onclick="window.location.reload()" title="Refresh">
                <i class="fas fa-sync-alt"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" id="exportBtn" title="Export Data">
                <i class="fas fa-download"></i>
            </button>
        </div>
    </div>

    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-striped table-hover mb-0" id="contractsTable">
                <thead class="table-light">
                    <tr>
                        <th>Supplier</th>
                        <th>Contract Type</th>
                        <th>Contract Terms</th>
                        <th>Payment Terms</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Contract Value</th>
                        <th>Status</th>
                        <th>Days Left</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        var isExpired = item.EndDate.HasValue && item.EndDate.Value < DateTime.Now;
                        var isExpiringSoon = item.EndDate.HasValue &&
                        item.EndDate.Value < DateTime.Now.AddDays(30) &&
                        item.EndDate.Value >= DateTime.Now;
                        var daysLeft = item.EndDate.HasValue ? (item.EndDate.Value - DateTime.Now).Days : 0;
                        var statusClass = isExpired ? "danger" : (isExpiringSoon ? "warning" : "success");
                        var statusText = isExpired ? "Expired" : (isExpiringSoon ? "Expiring Soon" : "Active");
                        if (!item.EndDate.HasValue)
                        {
                            statusClass = "info";
                            statusText = "Ongoing";
                        }

                        <tr>
                            <td>
                                <div class="fw-bold">@(item.Supplier?.CompanyName ?? "N/A")</div>
                                <small class="text-muted">@(item.Supplier?.ContactPerson ?? "-")</small>
                            </td>
                            <td>
                                <span class="badge bg-info">@(item.ContractType ?? "Not Specified")</span>
                            </td>
                            <td>
                                <div class="contract-terms" title="@item.ContractTerms">
                                    @if (!string.IsNullOrEmpty(item.ContractTerms))
                                    {
                                        @(item.ContractTerms.Length > 50 ? item.ContractTerms.Substring(0, 50) + "..." : item.ContractTerms)
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </div>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.PaymentTerms))
                                {
                                    <span class="badge bg-secondary">@item.PaymentTerms</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                <span class="fw-bold">@item.StartDate?.ToString("MMM dd, yyyy") ?? "-"</span>

                            </td>
                            <td>
                                @if (item.EndDate.HasValue)
                                {
                                    <span class="@(isExpired || isExpiringSoon ? "fw-bold" : "")">
                                        @item.EndDate.Value.ToString("MMM dd, yyyy")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No end date</span>
                                }
                            </td>
                            <td>
                                @if (item.ContractValue.HasValue && item.ContractValue.Value > 0)
                                {
                                    <span class="fw-bold text-success">@item.ContractValue.Value.ToString("C")</span>
                                }
                                else
                                {
                                    <span class="text-muted">$0.00</span>
                                }
                            </td>
                            <td>
                                <span class="badge bg-@statusClass">
                                    @if (isExpired)
                                    {
                                        <i class="fas fa-times-circle me-1"></i>
                                    }
                                    else if (isExpiringSoon)
                                    {
                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                    }
                                    else if (!item.EndDate.HasValue)
                                    {
                                        <i class="fas fa-infinity me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-check-circle me-1"></i>
                                    }
                                    @statusText
                                </span>
                            </td>
                            <td>
                                @if (item.EndDate.HasValue && !isExpired)
                                {
                                    <span class="badge bg-light text-dark">@daysLeft days</span>
                                }
                                else if (isExpired)
                                {
                                    <span class="badge bg-light text-dark">Expired</span>
                                }
                                else
                                {
                                    <span class="badge bg-light text-dark">-</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <a asp-action="Edit" asp-route-id="@item.ContractId"
                                       class="btn btn-outline-primary" title="Edit Contract">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a asp-action="Details" asp-route-id="@item.ContractId"
                                       class="btn btn-outline-info" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.ContractId"
                                       class="btn btn-outline-danger" title="Delete Contract">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="card-body text-center text-muted py-5">
            <i class="fas fa-file-contract fa-3x mb-3"></i>
            <h5>No contracts found</h5>
            <p class="mb-0">Get started by creating your first supplier contract.</p>
            <a asp-action="Create" class="btn btn-primary mt-3">
                <i class="fas fa-plus me-2"></i>Create First Contract
            </a>
        </div>
    }
    else
    {
        <div class="card-footer bg-light">
            <div class="row align-items-center">
                <div class="col">
                    <small class="text-muted">
                        Showing <strong>@Model.Count()</strong> contracts •
                        <span class="text-success"><strong>@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value >= DateTime.Now)</strong> active</span> •
                        <span class="text-warning"><strong>@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value < DateTime.Now.AddDays(30) && c.EndDate.Value >= DateTime.Now)</strong> expiring soon</span>
                    </small>
                </div>
                <div class="col-auto">
                    <small class="text-muted">
                        Last updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")
                    </small>
                </div>
            </div>
        </div>
    }
</div>

<!-- Quick Filter Buttons -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h6 class="mb-3">Quick Filters:</h6>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-success filter-btn" data-filter="all">
                        All Contracts (@Model.Count())
                    </button>
                    <button type="button" class="btn btn-outline-primary filter-btn" data-filter="active">
                        Active (@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value >= DateTime.Now))
                    </button>
                    <button type="button" class="btn btn-outline-warning filter-btn" data-filter="expiring">
                        Expiring Soon (@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value < DateTime.Now.AddDays(30) && c.EndDate.Value >= DateTime.Now))
                    </button>
                    <button type="button" class="btn btn-outline-danger filter-btn" data-filter="expired">
                        Expired (@Model.Count(c => c.EndDate.HasValue && c.EndDate.Value < DateTime.Now))
                    </button>
                    <button type="button" class="btn btn-outline-info filter-btn" data-filter="ongoing">
                        Ongoing (@Model.Count(c => !c.EndDate.HasValue))
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Filter functionality
            const filterButtons = document.querySelectorAll('.filter-btn');
            const tableRows = document.querySelectorAll('#contractsTable tbody tr');

            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const filter = this.getAttribute('data-filter');

                    // Remove active class from all buttons
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    // Add active class to clicked button
                    this.classList.add('active');

                    tableRows.forEach(row => {
                        const statusBadge = row.querySelector('.badge');
                        let showRow = false;

                        switch (filter) {
                            case 'all':
                                showRow = true;
                                break;
                            case 'active':
                                showRow = statusBadge.classList.contains('bg-success');
                                break;
                            case 'expiring':
                                showRow = statusBadge.classList.contains('bg-warning');
                                break;
                            case 'expired':
                                showRow = statusBadge.classList.contains('bg-danger');
                                break;
                            case 'ongoing':
                                showRow = statusBadge.classList.contains('bg-info');
                                break;
                        }

                        row.style.display = showRow ? '' : 'none';
                    });
                });
            });

            // Export functionality
            document.getElementById('exportBtn').addEventListener('click', function() {
                // Simple export alert - in real implementation, this would generate CSV/Excel
                alert('Export functionality would download a CSV file with all contract data.');
            });

            // Add tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}

@section Styles {

}